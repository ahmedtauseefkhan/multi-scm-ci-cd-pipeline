pipeline {
    
    agent any
    
    tools {
        jdk 'jdk17'
        maven 'Maven 3.8.6' // Ensure this matches the Maven installation name in Jenkins
    }
    
    environment {
        SERVICE_ONE = 'multi-scm-ci-cd-pipeline.git'
        SERVICE_TWO = 'ci-cd-sample-java-project.git'
        DOCKER_REGISTRY = 'https://index.docker.io/v1/'
        DOCKER_IMAGE_NAME = 'tauseef122/java-hello-world'
        DOCKER_CREDENTIALS_ID = 'docker-hub'
        DOCKER_TAG = 'latest'
        EMAIL_RECIPIENTS = 'tauseef.khan@tkxel.io'
    }
    
    stages {
        
        stage('Checkout Code') {
            steps {
                script {
                    // Checkout the first repository
                    checkout([$class: 'GitSCM',
                        branches: [[name: "${BRANCH_ONE}"]],
                        userRemoteConfigs: [[url: "https://github.com/ahmedtauseefkhan/${SERVICE_ONE}"]]
                    ])
                    
                    // Checkout the second repository
                    dir('ci-cd-sample-java-project') { // Use a different directory for the second repo
                        checkout([$class: 'GitSCM',
                            branches: [[name: "${BRANCH_TWO}"]],
                            userRemoteConfigs: [[url: "https://github.com/ahmedtauseefkhan/${SERVICE_TWO}"]]
                        ])
                    }
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    // Run SonarQube analysis using Maven
                    withSonarQubeEnv('SonarQube') {
                        sh 'mvn clean verify sonar:sonar -Dsonar.projectKey=sample -Dsonar.host.url=http://localhost:9000'
                    }
                }
            }
        }
    
        stage('Build Docker Image') {
            steps {
                script {
                    // Build Docker image
                    sh 'pwd'
                    sh 'docker build -t ${DOCKER_IMAGE_NAME} .'
                }
            }
        }
        
        stage('Push Docker Image to Docker Hub') {
            steps {
                script {
                    // Login to Docker Hub
                    docker.withRegistry("${env.DOCKER_REGISTRY}", "${env.DOCKER_CREDENTIALS_ID}") {
                        // Push the Docker image
                        docker.image("${env.DOCKER_IMAGE_NAME}:${env.DOCKER_TAG}").push("${env.DOCKER_TAG}")
                    }
                }
            }
        }
    }
    
    post {
        success {
            emailext (
                subject: "Jenkins Build Successful",
                body: "The build was successful.\n\nCheck the build at: ${JENKINS_URL}job/${JOB_NAME}/${BUILD_NUMBER}/",
                to: "${EMAIL_RECIPIENTS}"
            )
        }
        failure {
            emailext (
                subject: "Jenkins Build Failed",
                body: "The build has failed.\n\nCheck the build at: ${JENKINS_URL}job/${JOB_NAME}/${BUILD_NUMBER}/",
                to: "${EMAIL_RECIPIENTS}"
            )
        }
    }
}
