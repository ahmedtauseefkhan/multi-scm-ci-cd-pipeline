pipeline {
    
    agent any
    
    tools {
        jdk 'jdk17'
        maven 'Maven 3.8.6'
    }
    
    environment {
        SERVICE_ONE = 'multi-scm-ci-cd-pipeline.git'
        SERVICE_TWO = 'ci-cd-sample-java-project.git'
        DOCKER_REGISTRY = 'https://index.docker.io/v1/'
        DOCKER_IMAGE_NAME = 'tauseef122/java-hello-world'
        DOCKER_CREDENTIALS_ID = 'docker-hub'
        DOCKER_TAG = 'latest'
        EMAIL_RECIPIENTS = 'tauseef.khan@tkxel.io'
    }
    
    stages {
        
        stage('Checkout Code') {
            steps {
                script {
                    checkout([$class: 'GitSCM',
                        branches: [[name: "${BRANCH_ONE}"]],
                        userRemoteConfigs: [[url: "https://github.com/ahmedtauseefkhan/${SERVICE_ONE}"]]
                    ])
                    
                    dir('ci-cd-sample-java-project') { // Use a different directory for the second repo
                        checkout([$class: 'GitSCM',
                            branches: [[name: "${BRANCH_TWO}"]],
                            userRemoteConfigs: [[url: "https://github.com/ahmedtauseefkhan/${SERVICE_TWO}"]]
                        ])
                    }
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    withSonarQubeEnv('SonarQube') {
                        sh 'mvn clean verify sonar:sonar -Dsonar.projectKey=sample -Dsonar.host.url=http://localhost:9000'
                    }
                }
            }
        }
    
        stage('Build Docker Image') {
            steps {
                script {

                    sh 'pwd'
                    sh 'docker build -t ${DOCKER_IMAGE_NAME} .'
                }
            }
        }
        
        stage('Push Docker Image to Docker Hub') {
            steps {
                script {
                    docker.withRegistry("${env.DOCKER_REGISTRY}", "${env.DOCKER_CREDENTIALS_ID}") {
                        docker.image("${env.DOCKER_IMAGE_NAME}:${env.DOCKER_TAG}").push("${env.DOCKER_TAG}")
                    }
                }
            }
        }
        
        stage('Email-notify') {
            steps {
                emailext attachLog: true, body: 'This is the extended Email body', subject: 'This is the extended Email subject', to: 'tauseef.khan@tkxel.io'
            }
        }
    }
    
    post {
        always {
            mail(
                to: "${env.EMAIL_RECIPIENTS}",
                subject: "${env.JOB_NAME} - Build #${env.BUILD_NUMBER} - ${currentBuild.currentResult}",
                body: "Build Status: ${currentBuild.currentResult}\nCheck console output at ${env.BUILD_URL}"
            )
        }
    }
}
